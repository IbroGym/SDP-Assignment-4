Паттерн «Наблюдатель» (Observer)
Описание паттерна простыми словами: Представьте, что у вас есть некое событие, о котором нужно уведомить множество заинтересованных объектов. Например, это может быть система акций, где цена акций постоянно меняется, и несколько инвесторов хотят получать уведомления об этих изменениях. Паттерн "Наблюдатель" позволяет сделать так, чтобы объект, в котором происходят изменения (например, акции), мог уведомлять всех, кто за ним следит (инвесторов). То есть, когда происходит изменение, все подписчики автоматически получают обновление без необходимости напрямую связывать их с объектом.

Пример из реальной жизни: Представьте, что вы подписаны на канал в YouTube. Когда блогер выпускает новое видео, вы получаете уведомление об этом. Вам не нужно постоянно проверять канал — как только появляется новое видео, уведомление приходит само. В этой ситуации блогер — это "издатель", а вы — "наблюдатель".

Проблемы, которые решает паттерн:

Излишняя зависимость объектов друг от друга: Без использования паттерна, объект (например, акции) был бы тесно связан с каждым подписчиком (инвестором). Это увеличивает зависимость и сложность системы: при каждом изменении подписчика пришлось бы изменять и объект.
Нерасширяемая система: Когда нужно добавить нового подписчика, приходилось бы изменять сам объект (например, акции). Это приводит к нарушению принципа расширяемости (OCP — принцип открытости-закрытости).
Как именно паттерн решает проблемы:

Уменьшение зависимости: Паттерн "Наблюдатель" устраняет необходимость в жесткой связи между объектом и его подписчиками. Объект (акции) просто знает, что у него есть наблюдатели, и уведомляет их, не заботясь о том, кто они и что с ними делать.
Простота добавления новых подписчиков: С помощью паттерна можно легко добавлять новых подписчиков (инвесторов) без изменения исходного кода объекта (акций). Это делает систему более гибкой и расширяемой.